using UnityEngine;
using System.Collections.Generic;

public class FloorGenerator : ScriptableObject
{

	private Monster mon;
	private int[] coords = { 0, 0 };
	private Room[,] roomArray2d;
	private IList<int[]> occupiedCoords = new List<int[]>();
	private Item item;
	private List<Direction> directions = new List<Direction> ();
	private string[] descriptions = { "test desc 1", "test desc 2", "test desc 3" };
	private bool bossRoom;
	private int amountOfGeneratedRooms;
	private int xCoord;
	private int yCoord;


	/// <summary>
	/// Generates a new 5x5 floor. Starting point will always be 0,0.
	/// </summary>
	/// <returns>A Room[,] array, containing a fully-generated floor.</returns>
	public Room[,] GenerateFloor ()
	{

		ResetAttributes ();
		int[] coords;
		// Generates new rooms until fifteen rooms have been created. Hard limit for testing, probably will insert a randomly-generated hard cap later.
		do {
			coords = DecideNextRoom();
			GenerateRoom(coords[0],coords[1]);
		} while (amountOfGeneratedRooms < 12);

		return roomArray2d;

	}

	/// <summary>
	/// Generates a new room.
	/// </summary>
	/// <returns>A Room object.</returns>
	private void GenerateRoom(int x, int y){

		Room r = ScriptableObject.CreateInstance<Room> ();
		r.Description = descriptions [Random.Range (0, 3)];

		roomArray2d [x, y] = r;

		amountOfGeneratedRooms++;
	}

	/// <summary>
	/// Resets the generation attributes so that a new floor can be fully generated.
	/// </summary>
	private void ResetAttributes ()
	{
		amountOfGeneratedRooms = 0;
		roomArray2d = new Room[5, 5];
		mon = null;
		item = null;
		bossRoom = false;
	}


	//private void DecideNextRoom()
	//{
	//    int roomLength = occupiedCoords.Count;
	//    coords[0] = 0;
	//    coords[1] = 0;
	//    if (amountOfGeneratedRooms==0)
	//    {
	//        GenerateRoom(0,0);
	//    } else
	//    {

	//    }
	//}


	/// <summary>
	/// Determines where in the 2D array the next room will be generated by returning a pair of coordinates.
	/// </summary>
	/// <returns>An int[] array containing two integers, meant as coordinates for the next room to be generated within.</returns>
	private int[] DecideNextRoom ()
	{
		// Making extensive use of the Unity Mathf API's Clamp method to make sure we do not go out of the array's bounds.

		// Returns 0 and 0 as coordinates if no room has been generated yet, making sure we always have a room at 0,0 to start from.
		if (roomArray2d [0, 0] == null) {
			coords [0] = 0;
			coords [1] = 0;
			amountOfGeneratedRooms++;
			return coords;
		} else {
			bool searchingForCoord = true;
			do {
				xCoord = Random.Range (0, 5);
				yCoord = Random.Range (0, 5);
				// Checks if the coord is an empty spot.
				if (roomArray2d [xCoord, yCoord] == null) {
					// Checks if there are any rooms adjacent to the chosen empty spot.
					if (roomArray2d [Mathf.Clamp(xCoord + 1,0,4), yCoord]  == null && roomArray2d [Mathf.Clamp(xCoord - 1,0,4),yCoord]  == null && roomArray2d [xCoord, Mathf.Clamp(yCoord + 1,0,4)]  == null && roomArray2d [xCoord, Mathf.Clamp(yCoord - 1,0,4)] == null) {
						// Restarts the loop, as the Random generator has chosen a coordinate with no adjacent rooms.
						continue;
					} else {
						searchingForCoord = false;
					}
				}
			} while(searchingForCoord);
				

			coords [0] = xCoord;
			coords [1] = yCoord;

			return coords;
		}
   }

}
