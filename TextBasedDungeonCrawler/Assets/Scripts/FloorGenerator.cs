using UnityEngine;
using System.Collections;

public class FloorGenerator : MonoBehaviour
{

	private Monster mon;
	private int[] coords = { 0, 0 };
	private Room[,] roomArray2d;
	private Item item;
	private bool bossRoom;
	private int amountOfGeneratedRooms;
	private int xCoord;
	private int yCoord;


	/// <summary>
	/// Generates a new 5x5 floor. Starting point will always be 0,0.
	/// </summary>
	/// <returns>A Room[,] array, containing a fully-generated floor.</returns>
	public Room[,] GenerateFloor ()
	{

		ResetAttributes ();

		// Generates new rooms until fifteen rooms have been created. Hard limit for testing, probably will insert a randomly-generated hard cap later.
		do {
			
		} while (amountOfGeneratedRooms < 15);

		return null;

	}

	/// <summary>
	/// Generates a new room.
	/// </summary>
	/// <returns>A Room object.</returns>
	private Room GenerateRoom(){
		return null;
	}

	/// <summary>
	/// Resets the generation attributes so that a new floor can be fully generated.
	/// </summary>
	private void ResetAttributes ()
	{
		amountOfGeneratedRooms = 0;
		roomArray2d = new Room[5, 5];
		mon = null;
		item = null;
		bossRoom = false;
	}


	/// <summary>
	/// Determines where in the 2D array the next room will be generated by returning a pair of coordinates.
	/// </summary>
	/// <returns>An int[] array containing two integers, meant as coordinates for the next room to be generated within.</returns>
	private int[] DecideNextRoom ()
	{

		/*
		 * Missing:
		 * 
		 * Potentially implement door placement at some point. Currently all adjacent rooms can be accessed, could maybe at some point implement a door variable to make room connections more natural and dynamic.
		 *
		 */

		// Returns 0 and 0 as coordinates if no room has been generated yet, making sure we always have a room at 0,0 to start from.
		if (roomArray2d [0, 0] == null) {
			coords [0] = 0;
			coords [1] = 0;
			amountOfGeneratedRooms++;
			return coords;
		} else {
			bool searchingForCoord = true;
			do {
				xCoord = Random.Range (0, 5);
				yCoord = Random.Range (0, 5);
				// Checks if the coord is an empty spot.
				if (roomArray2d [xCoord, yCoord] == null) {
					// Checks if there are any rooms adjacent to the chosen empty spot.
					if (roomArray2d [xCoord + 1, yCoord] && roomArray2d [xCoord - 1, yCoord] && roomArray2d [xCoord, yCoord + 1] && roomArray2d [xCoord, yCoord - 1] == null) {
						// Restarts the loop, as the Random generator has chosen a coordinate with no adjacent rooms.
						continue;
					} else {
						searchingForCoord = false;
					}
				}
			} while(searchingForCoord);

			amountOfGeneratedRooms++;

			coords [0] = xCoord;
			coords [1] = yCoord;

			return coords;
		}
	}

}
